generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 Int                @id @default(autoincrement())
  email              String             @unique
  password           String
  refreshtoken       String?
  firstName          String
  lastName           String
  avatar             String?
  createdTasks       Task[]             @relation("createdTasks")
  ownedWorkSpace     WorkSpace[]
  memberedWorkSpaces WorkSpaceMembers[]
  memberedProjects   ProjectMembers[]
}

model Task {
  id          Int            @id @default(autoincrement())
  title       String
  description String?
  creatorId   Int
  projectId   Int            @default(0)
  creator     User           @relation("createdTasks", fields: [creatorId], references: [id], onDelete: Cascade, map: "creator_fkey")
  project     Project        @relation(fields: [projectId], references: [id], onDelete: Cascade, map: "project_fkey")
  workers     AssignedTask[]
}

model AssignedTask {
  id         Int            @id @default(autoincrement())
  taskId     Int
  memberId   Int
  isActive   Boolean?       @default(false)
  isComplete Boolean?       @default(false)
  task       Task           @relation(fields: [taskId], references: [id], onDelete: Cascade, map: "task_fkey")
  member     ProjectMembers @relation("assignedTasks", fields: [memberId], references: [id], onDelete: Cascade, map: "member_fkey")
  workTime   Int            @default(0)
  TimeLines  TimeLines[]

  @@unique([taskId, memberId], name: "taskid")
}

model TimeLines {
  id           Int          @id @default(autoincrement())
  taskId       Int
  startTime    DateTime?    @db.Timestamp(6)
  endTime      DateTime?    @db.Timestamp(6)
  AssignedTask AssignedTask @relation(fields: [taskId], references: [id], onDelete: Cascade, onUpdate: Cascade, map: "nasjk")
}

model WorkSpace {
  id                 Int                 @id @default(autoincrement())
  title              String
  cover              String?
  ownerId            Int
  owner              User                @relation(fields: [ownerId], references: [id], onDelete: Cascade, onUpdate: Cascade, map: "owner_fk")
  projects           Project[]
  members            WorkSpaceMembers[]
  WorkspaceInviteUrl WorkspaceInviteUrl?
}

model WorkSpaceMembers {
  id          Int       @id @default(autoincrement())
  workspaceId Int
  memberId    Int
  role        Roles     @default(Member)
  member      User      @relation(fields: [memberId], references: [id], onDelete: Cascade, onUpdate: Cascade, map: "member_fk")
  workspace   WorkSpace @relation(fields: [workspaceId], references: [id], onDelete: Cascade, onUpdate: Cascade, map: "workspace_fk")

  @@unique([workspaceId, memberId])
}

model WorkspaceInviteUrl {
  workspaceId Int       @unique
  workspace   WorkSpace @relation(fields: [workspaceId], references: [id], onDelete: Cascade, onUpdate: Cascade, map: "workspace_fk")
  code        String    @unique
}

model Project {
  id          Int              @id @default(autoincrement())
  title       String
  workspaceId Int
  isHidden    Boolean          @default(false)
  tasks       Task[]
  members     ProjectMembers[]
  workspace   WorkSpace        @relation(fields: [workspaceId], references: [id], onDelete: Cascade, onUpdate: Cascade, map: "workspace_fk")
}

model ProjectMembers {
  id           Int            @id @default(autoincrement())
  projectId    Int
  memberId     Int
  role         Roles          @default(Member)
  project      Project        @relation(fields: [projectId], references: [id], onDelete: Cascade, onUpdate: Cascade, map: "project_fkey")
  member       User           @relation(fields: [memberId], references: [id], onDelete: Cascade, onUpdate: Cascade, map: "member_fkey")
  AssignedTask AssignedTask[] @relation("assignedTasks")

  @@unique([projectId, memberId])
}

enum Roles {
  Owner
  Manager
  Member
}
